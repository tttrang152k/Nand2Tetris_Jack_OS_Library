// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int size; // size of string
    field int max_size;
    // Character address
    field Array Char;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(maxLength = 0){
           let maxLength = 1;   
        }
        let size = 0;
        let max_size = maxLength;
        let Char = Array.new(maxLength);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        // dispose the char array
        do Char.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return size;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return Char[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let Char[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(size < max_size){
            let Char[size] = c;
            let size = size + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (size > 0){
            let size = size - 1;
        }
        return;
    }

    // ---------- Helper functions ----------------------
    // check digit
    function boolean isDigit(char c){
        return ~(c < 48) & ~(c > 57);
    }

    // char-digit conversion
    function int charToDigit(char c){
        return c - 48;
    }
    function char digitToChar(int d){
        return d + 48;
    }
    // syntax error with 'function' 
    method void setIntHelper(int num){
        var int next;

        if(num < 10){
            do appendChar(String.digitToChar(num));
        }else{
            let next = num / 10;
            do setIntHelper(next);
            do appendChar(String.digitToChar(num - (next * 10)));
        }
        return;
    }

    // --------------------------------------------------

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, idx;
        var boolean is_negative;
        let val = 0;

        // check sign of integer
        if((size > 0) & (Char[0] = 45)){
            let is_negative = true;
            let idx = 1;
        }else{
            let is_negative = false;
            let idx = 0;
        }

        while((idx < size) & String.isDigit(Char[idx])){
            let val = (val * 10) + String.charToDigit(Char[idx]);
            let idx = idx + 1;
        }

        if(is_negative){
            return -val;
        }else{
            return val;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let size = 0;
        if(val < 0){
            let val = -val;
            do appendChar(45);
        }
        do setIntHelper(val);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
