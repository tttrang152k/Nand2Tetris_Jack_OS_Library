// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack
/**
 *  A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static int n;             // Number of bits used for representing a two's complement integer
    static Array pow2; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    // Initializes the Math library.
    function void init() {
        let n = 16;
        let pow2 = Array.new(n);
        // hard-coded because the multiplication method doesn't work
        let pow2[0] = 1;
        let pow2[1] = 2;
        let pow2[2] = 4;
        let pow2[3] = 8;
        let pow2[4] = 16;
        let pow2[5] = 32;
        let pow2[6] = 64;
        let pow2[7] = 128;
        let pow2[8] = 256;
        let pow2[9] = 512;
        let pow2[10] = 1024;
        let pow2[11] = 2048;
        let pow2[12] = 4096;
        let pow2[13] = 8192;
        let pow2[14] = 16384;
        let pow2[15] = 16384 + 16384;    // illegal 16-bit value: 32768
        return;
    }

    // List of Helper functions (used by other jack OS library as well)
    // ----------------------------
    /** Returns true if the j-th bit of x is 1, false otherwise. */
    function boolean isBitSet(int x, int j) {
        return ~((x & pow2[j]) = 0);
    }

    /** Returns x mod y. */
    function int mod(int x, int y) {
        return x - (Math.divide(x, y) * y);
    }

    /** Returns 2^i using the pow2 array. */
    function int powerOfTwo(int i) {
        return pow2[i];
    }
    //-----------------------------

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method. 
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value. */
    function int multiply(int x, int y) {
        var int result, current, bitIndex;
        let result = 0;
        let current = x;
        let bitIndex = 0;

        while (bitIndex < 16) {
            if (Math.isBitSet(y, bitIndex)) {
                let result = result + current;
            }
            let current = current + current;
            let bitIndex = bitIndex + 1;
        }
        return result;
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value. */
    function int divide(int x, int y) {
        var int quotient, finalResult;
        var boolean sameSign;

        let sameSign = ((x < 0) = (y < 0));
        let x = Math.abs(x);
        let y = Math.abs(y);

        if (y > x) {
            return 0;
        }

        let quotient = Math.divide(x, y + y);

        if ((x - (2 * quotient * y)) < y) {
            let finalResult = quotient + quotient;
        } else {
            let finalResult = quotient + quotient + 1;
        }

        if (sameSign) {
            return finalResult;
        } else {
            return -finalResult;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int root, i, trial, square;

        let root = 0;
        let i = 7;

        while (~(i < 0)) {
            let trial = root + pow2[i];
            let square = trial * trial;

            if (~(square > x) & (square > 0)) {
                let root = trial;
            }
            let i = i - 1;
        }
        return root;
    }

    /** Returns the greater value. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller value. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return 0 - x;
        }
        return x;
    }
}
